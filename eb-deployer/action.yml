name: eb-deployer
description: Deploy a zip file using eb_deployer
inputs:
  PHOENIX_MODE_WORKFLOW:
    description: Deploy ENV from scratch
    required: true
  ENVIRONMENT:
    description: environment name
    required: true
  DB_SG:
    description: database security group
    required: true
  AWS_ACCESS_KEY_ID:
    description: role to assume
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: role to assume
    required: true
  HASURA_DIR:
    description: The dir of the rails app
    required: false
    default: .
  WORKING_DIR:
    description: The dir of the rails app
    required: false
    default: .
  AWS_REGION:
    description: the region to deploy to
    required: false
    default: us-east-1
  GIT_SHA:
    description: the git sha you want to deploy
    required: false
  SLACK_BOT_TOKEN:
    description: slackbot token
    required: true

runs:
  using: composite
  steps:
    - name: Checkout from GIT_SHA
      if: ${{ inputs.GIT_SHA}}
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.GIT_SHA }}
    - name: Otherwise, Checkout from HEAD
      if: ${{ ! inputs.GIT_SHA }}
      uses: actions/checkout@v3
    - name: check .ruby-version
      shell: bash
      working-directory: ${{ inputs.WORKING_DIR }}
      run: echo "RUBY_VERSION=`cat .ruby-version`" >> $GITHUB_ENV
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1.126.0
      with:
        bundler-cache: true
        ruby-version: ${{ env.RUBY_VERSION }}
    - name: Add public IP to AWS security group
      uses: sohelamin/aws-security-group-add-ip-action@master
      with:
        aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'us-east-1'
        aws-security-group-id: ${{ inputs.DB_SG }}
        port: '5432'
        to-port: '5432'
        protocol: 'tcp'
        description: 'GitHub Action'
    - name: Install dependencies
      shell: bash
      working-directory: ${{ inputs.WORKING_DIR }}
      run:  bundle install --path vendor/bundle
    - name: Configure AWS credentials AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are pulled from secrets
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.AWS_REGION }}
    - name: Deploy
      shell: bash
      working-directory: ${{ inputs.WORKING_DIR }}
      run: |
        sed -i.backup -e "s|GIT_SHA|${{ inputs.GIT_SHA }}|g" Dockerrun.aws.json
        sed -i.backup -e "s|REGION|${{ inputs.AWS_REGION }}|g" Dockerrun.aws.json
        gem install eb_deployer
        aws s3 cp s3://acutity-env/backend/${{ inputs.ENVIRONMENT}} ./.env
        echo PHOENIX_MODE_WORKFLOW=${{ inputs.PHOENIX_MODE_WORKFLOW }} >> .env
        set -o allexport
        source .env
        set +o allexport
        sed -i.backup -e "s|awslogs-rails|awslogs-rails-$RAILS_ENV|g" Dockerrun.aws.json
        sed -i.backup -e "s|awslogs-nginx|awslogs-nginx-$RAILS_ENV|g" Dockerrun.aws.json
        if [ ${{ inputs.ENVIRONMENT}} == "prod" ] || [ ${{ inputs.ENVIRONMENT}} == "caat" ]; then
          echo "Prod env changing cpu and memory"
          sed -i.backup -e "s|1600|3600|g" Dockerrun.aws.json
          sed -i.backup -e "s|1024|2024|g" Dockerrun.aws.json
        fi
        cat Dockerrun.aws.json
        bundle exec rake db:migrate
        zip -r app.zip Dockerrun.aws.json entrypoint.sh .ebextensions/
        eb_deploy -p app.zip -e ${{ inputs.ENVIRONMENT}}
    - name: Check Deploy Failure
      if: ${{ failure() }}
      id: check-deploy-failure
      shell: bash
      run: echo '::set-output name=DEPLOY_FAILED::true'
    - name: Setup node
      uses: actions/setup-node@v2

    - name: Install Hasura CLI & Apply Metadata
      working-directory: ${{ inputs.HASURA_DIR }}
      shell: bash
      run: |
        aws s3 cp s3://acutity-env/backend/${{ inputs.ENVIRONMENT}} ./.env
        set -o allexport
        source .env
        set +o allexport
        npm install --global hasura-cli &&
        hasura metadata apply --admin-secret $HASURA_ADMIN_SECRET --endpoint  "https://$HASURA_ENDPOINT" --skip-update-check
    - name: Post to a Slack channel
      id: slack
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: 'C04GQE833LY'
        slack-message: "Rails API deployed to ${{ inputs.ENVIRONMENT}}\nGitHub build result: ${{ job.status }}\nBranch: ${{ github.head_ref || github.ref_name }} \nGit SHA: ${{ inputs.GIT_SHA }}"
      env:
        SLACK_BOT_TOKEN: ${{ inputs.SLACK_BOT_TOKEN }}


